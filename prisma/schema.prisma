// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                     String                 @id @default(uuid())
  name                   String
  priceInCents           Int
  filePath               String
  imagePath              String
  description            String
  isAvailableForPurchase Boolean                @default(true)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  orders                 OrderProduct[]         // Many-to-many relation with OrderProduct
  downloadVerifications  DownloadVerification[]
  discountCode           DiscountCode[]
}

model User {
  id             String    @id @default(uuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  address        String?
  profileImage   String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  isAdmin        Boolean   @default(false)
  orders         Order[]
}

model Order {
  id               String        @id @default(uuid())
  pricePaidInCents Int
  currency         String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  userId           String
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  DiscountCode     DiscountCode? @relation(fields: [discountCodeId], references: [id], onDelete: Restrict)
  discountCodeId   String?
  status           String?
  sessionId        String        @unique
  products         OrderProduct[] // Reference to OrderProduct for the many-to-many relationship
}

model DownloadVerification {
  id        String   @id @default(uuid())
  expiresAt DateTime
  createdAt DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model DiscountCode {
  id             String           @id @default(uuid())
  code           String           @unique
  discountAmount Int
  discountType   DiscountCodeType
  uses           Int              @default(0)
  isActive       Boolean          @default(true)
  allProducts    Boolean          @default(false)
  createdAt      DateTime         @default(now())
  limit          Int?
  expiresAt      DateTime?

  products Product[]
  orders   Order[]
}

enum DiscountCodeType {
  PERCENTAGE
  FIXED
}

model OrderProduct {
  orderId          String
  productId        String
  quantity         Int
  pricePaidInCents Int
  order            Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product          Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  @@id([orderId, productId])  // Composite key ensuring a unique combination of orderId and productId
}
