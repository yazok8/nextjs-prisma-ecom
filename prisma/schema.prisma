// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                     String                 @id @default(uuid())
  name                   String
  priceInCents           Int
  filePath               String
  imagePath              String
  description            String
  isAvailableForPurchase Boolean                @default(true)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  orders                 Order[]
  downloadVerifications  DownloadVerification[]
  discountCode           DiscountCode[]
}

model User {
  id             String    @id @default(uuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  address        String?
  profileImage   String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  isAdmin        Boolean   @default(false)
  orders         Order[]
}

model Order {
  id               String        @id @default(uuid())
  pricePaidInCents Int
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  userId           String
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId        String
  product          Product?       @relation(fields: [productId], references: [id], onDelete: Restrict)
  cartProductId    String         
  products         CartProduct @relation(fields: [cartProductId], references: [id], onDelete: Restrict)
  status           String?
  deliveryStatus   String?
  DiscountCode     DiscountCode? @relation(fields: [discountCodeId], references: [id], onDelete: Restrict)
  discountCodeId   String?
  paymentIntentId  String?       @unique
  addressId        String?
  Address          Address?      @relation(fields: [addressId], references: [id], onDelete: Cascade)
}

model CartProduct{
    id               String        @id @default(uuid())
    name             String
    description      String
    category         String?
    brand            String?
    selectedImg      String?
    quantity         String?
    price            Float
    orders           Order[]
}

model Address{
  id               String        @id @default(uuid())
  city             String?
  country          String?
  line1            String?
  line2            String?
  postal_code      String?
  state            String?
  order            Order[]
}


model DownloadVerification {
  id        String   @id @default(uuid())
  expiresAt DateTime
  createdAt DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model DiscountCode {
  id             String           @id @default(uuid())
  code           String           @unique
  discountAmount Int
  discountType   DiscountCodeType
  uses           Int              @default(0)
  isActive       Boolean          @default(true)
  allProducts    Boolean          @default(false)
  createdAt      DateTime         @default(now())
  limit          Int?
  expiresAt      DateTime?

  products Product[]
  orders   Order[]
}

enum DiscountCodeType {
  PERCENTAGE
  FIXED
}
