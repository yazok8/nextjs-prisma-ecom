// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ProcessedEvent {
  id          String   @id
  processedAt DateTime @default(now())
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
}


model Product {
  id                     String                 @id @default(uuid())
  name                   String
  priceInCents           Int
  filePath               String?
  imagePath              String
  description            String
  categoryId             String?
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  brand                  String? 
  isAvailableForPurchase Boolean                @default(true)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  orderProducts          OrderProduct[]         // Relation to OrderProduct
  downloadVerifications  DownloadVerification[] // Relation to DownloadVerification
  discountCodes          DiscountCode[]         // Relation to DiscountCode
}

model Account {
  id                 String    @id @default(uuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  emailVerified  DateTime?
  address        String?
  profileImage   String?
  hashedPassword String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           Role      @default(USER)
  orders         Order[]   // Relation to Order
  accounts      Account[]
  sessions      Session[]
}

model Session{
   id             String    @id @default(uuid())
   sessionToken   String    @unique
   userId         String
   expire         DateTime
   user           User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

enum Role{
  USER
  ADMIN
}


model Order {
  id               String        @id @default(uuid())
  pricePaidInCents Int
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  userId           String
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  currency         String?
  status           String?
  deliveryStatus   String?
  paymentIntentId  String?       @unique
  orderProducts    OrderProduct[] // Relation for multiple products
  DiscountCode     DiscountCode? @relation(fields: [discountCodeId], references: [id], onDelete: Restrict)
  discountCodeId   String?
  addressId        String?
  Address          Address?      @relation(fields: [addressId], references: [id], onDelete: Cascade)
}

model OrderProduct {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Int
}

model DownloadVerification {
  id        String   @id @default(uuid())
  expiresAt DateTime
  createdAt DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model DiscountCode {
  id             String           @id @default(uuid())
  code           String           @unique
  discountAmount Int
  discountType   DiscountCodeType
  uses           Int              @default(0)
  isActive       Boolean          @default(true)
  allProducts    Boolean          @default(false)
  createdAt      DateTime         @default(now())
  limit          Int?
  expiresAt      DateTime?
  products       Product[]        // Many-to-many relation to Product
  orders         Order[]          // Many-to-many relation to Order
}

model Address {
  id               String   @id @default(uuid())
  city             String?
  country          String?
  line1            String?
  line2            String?
  postal_code      String?
  state            String?
  order            Order[]
}

enum DiscountCodeType {
  PERCENTAGE
  FIXED
}
