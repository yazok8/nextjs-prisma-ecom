generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model ProcessedEvent {
  id          String   @id @map("_id")
  processedAt DateTime @default(now())
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  products Product[]
}

model Product {
  id                     String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                   String                 @unique
  priceInCents           Int
  filePath               String?
  imagePath              String
  description            String
  isAvailableForPurchase Boolean                @default(true)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  brand                  String?
  categoryId             String?                @db.ObjectId
  downloadVerifications  DownloadVerification[]
  orderProducts          OrderProduct[]
  category               Category?              @relation(fields: [categoryId], references: [id], onDelete: Restrict)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  email          String    @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  emailVerified  DateTime?
  hashedPassword String
  name           String
  address        String?
  profileImage   String?
  role           Role      @default(USER)
  orders         Order[]
  accounts       Account[]
  sessions       Session[]
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expire       DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Order {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  pricePaidInCents Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userId           String         @db.ObjectId
  discountCodeId   String?        @db.ObjectId
  addressId        String?        @db.ObjectId
  currency         String?
  deliveryStatus   String?
  paymentIntentId  String?        @unique
  status           String?
  Address          Address?       @relation(fields: [addressId], references: [id], onDelete: Cascade)
  DiscountCode     DiscountCode?  @relation(fields: [discountCodeId], references: [id], onDelete: Restrict)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderProducts    OrderProduct[]
}

model OrderProduct {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  productId String  @db.ObjectId
  quantity  Int
  price     Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model DownloadVerification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  expiresAt DateTime
  createdAt DateTime @default(now())
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model DiscountCode {
  id             String                @id @default(auto()) @map("_id") @db.ObjectId
  code           String                @unique
  discountAmount Int
  discountType   DiscountCodeType
  uses           Int                   @default(0)
  isActive       Boolean               @default(true)
  allProducts    Boolean               @default(false)
  createdAt      DateTime              @default(now())
  limit          Int?
  expiresAt      DateTime?
  orders         Order[]
}

model Address {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  city        String?
  country     String?
  line1       String?
  line2       String?
  postal_code String?
  state       String?
  order       Order[]
}

enum Role {
  USER
  ADMIN
}

enum DiscountCodeType {
  PERCENTAGE
  FIXED
}

